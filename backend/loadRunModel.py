import numpy as np
import tensorflow as tf
from keras.models import load_model

import base64
from PIL import Image
import io

import commonVariables as val

def modelPrediction(dogBreedImage):
    loadModel = load_model('model/InceptionV3-2.8-Augmented.keras')

    #convert image

    valueBreed = tf.keras.utils.load_img(dogBreedImage, target_size=(val.image_size,val.image_size))

    img_array = tf.keras.utils.img_to_array(valueBreed)
    img_array = tf.expand_dims(img_array, 0) # Create a batch

    predictions = loadModel.predict(img_array)

    # each result here has 0.00 ... instead of a full number in front, which is why the confidence is low no matter what.
    # even when using the pretrained images, it'll get the breed right, but the confidence will always stay around 1-2%
    score = tf.nn.softmax(predictions[0])

    #print(score) 
    #print("--------")

    confidence = 100 * np.max(score)
    confidencePercentage = ("{:.2f}").format(confidence) #+ "%"

    data = {"predictedBreed": val.breedLabel[np.argmax(score)],
            "confidence": confidencePercentage,
            "actualBreed": dogBreedImage,
            "image": dogBreedImage,
            }
    
    #return print(data)
    return data

def webcamBase64toJPG(base64String):
    img = Image.open(io.BytesIO(base64.decodebytes(bytes(base64String, "utf-8"))))
    img.save('webcamImage.jpeg')
    return modelPrediction('webcamImage.jpeg')

#data:image/jpeg;base64,
string = "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"